{
  "title": "Cross Browser Image Cropping Via CSS",
  "published": false,
  "date": "2018-06-11T21:36:43-05:00",
  "description": "A cross browser method of cropping images on the frontend using CSS.",
  "body": "\n\nCropping images on the web kind of sucks. You could, of course, open up your favorite image editor and use the crop feature to get the image just right. Or you could crop your images on the server before sending them to your user's browser. However, both of these methods fall apart when you bring responsiveness into the mix. \n\nOne method that works great is the object-fit CSS property. This property allows an explicit width and height to be set on an image tag and the browser will automatically crop the image to fit in those dimensions without stretching the image. However, object-fit has one massive downfall. It doesn't work in internet explorer at all. \n\nFor some of you this may not be a problem, but for the rest of us that have to support such an abomination, there are some alternatives.\n\nBackground Image\n\nA super simple solution to this cropping issue can be solved by using background-image.\n\n```html\n<div class=\"image\"></div>\n\n<style>\n    .image {\n        width: 100px;\n        height: 200px;\n        background-image: url('https://i.imgur.com/jg0bGqX.jpg');\n        background-size: cover;\n        background-position: center;\n    }\n</style>\n```\n\nSetting the background-size: cover; property means that the image will cover the entire containing element, without stretching the image, but potentially cropping it along one of its axes. \n\nThis method works really well but still has some drawbacks.\n\n1. If the image URL is coming from your server, you have to fallback setting the background-image via a style attribute. Not the end of the world, but a little annoying.\n2. Img tags are super easy to make accessible, but you could probably make the div used in the example accessible via some aria-labels.\n3. There is a potential loss of SEO from not having an actual image tag. This one doesn't have a clear workaround and was the biggest pain point for me on a couple of recent projects.\n\nWrapping Element with a hidden overflow\n\n```html\n<div class=\"img-wrapper\">\n    <img src=\"https://i.redd.it/e3utgzi1aqt01.jpg\" />\n</div>\n\n<style>\n    .img-wrapper {\n        position: relative;\n        overflow: hidden;\n        width: 200px;\n        height: 150px;\n    }\n    \n    .img-wrapper img {\n        position: absolute;\n        left: -10000%;\n        right: -10000%;\n        top: -10000%;\n        bottom: -10000%;\n        margin: auto;\n        transform: scale(.1);\n        min-width: 1000%;\n        min-height: 1000%;\n        max-width: 10000%;\n        max-height: 10000%;\n    }\n</style>\n```\n\nAlthough this solution is a little more complicated, it works great. We start by wrapping the image tag in an element with an overflow hidden, and an explicit width and height. We also set the position to relative so that we can position the image tag absolutely inside of it.\n\nOn the image tag itself, we set the left, right, top, bottom, and margin properties are all working together to center the image inside of the wrapper. Lastly, we use a combination of min and max width and height along with a scale function to ensure that the image resizes appropriately. We're making sure that at a minimum the image stretches the entire container, and then giving it plenty of room to grow as well.\n\nAnd there you have it, pure frontend image cropping that works in older versions of internet explorer as well as modern browsers. \n\nIf you've found an easier, more concise way to solve this problem, be sure to hit me up me@levizitting.com"
}