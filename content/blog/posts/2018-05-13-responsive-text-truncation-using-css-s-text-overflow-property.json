{
  "title": "Responsive Text Truncation using CSS's text-overflow Property",
  "published": true,
  "date": "2018-05-13T17:31:01-05:00",
  "description": "A quick guide covering the basics of the css text-overflow property, as well as some potential pitfalls you might run into while using it.",
  "body": "\nLet me set the stage real quick. You're working on some kind of list view on a website. A list of blog posts or product descriptions, you name it. Now these list items can come with lots of information, images, prices, author data, timestamps, and descriptions. \n\nGenerally, you only want to show a subset of this information to your users while in the list view as to not overload them with information. Lots of times this means truncating the text of large properties such as the description and adding an ellipsis (...) to the end to indicate that there is more content available. \n\nGreat, this solution works, for now. Once we start thinking about responsiveness, this basic text truncation can begin to cause issues. On larger screens we may have some extra space, while on mobile we may have to little space causing our truncated text to wrap onto multiple lines.\n\nWhat we really need, is a way to truncate text dynamically depending on the container of our text. Luckily CSS provides a fairly straight forward way to do this. Introducing `text-overflow.`\n\nOn it's own, `text-overflow` doesn't do much. It works together with two other properties, `overflow: hidden;` and `white-space: nowrap;`. Let's start by breaking these down.\n\nMany of you may already be familiar with `overflow: hidden;`. It's fairly straight forward. When applying this property to an element, that element's children will not be able to change the parent's width, and will instead be clipped out. \n\nThe `white-space: nowrap;` property prevents text from wrapping onto multiple lines no matter how many characters. The only thing that will force a line break when using this property is a `<br>` tag. \n\nNow, let's jump into `text-overflow` by looking at an example.\n\nFor this example, let's assume we have this markup\n\n```html\n<div class=\"wrapper\">\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n</div>\n```\n\nNow, the css\n\n```css\n.wrapper p {\n  width: 25%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\nAnd...Tada!\n\n![](/images/uploads/text-overflow-demo-screenshiot-01.jpg)\n\nOur text is being truncated via css. Also, as we resize our browser window, we'll begin to see the amount of text shown automatically adjust itself.\n\nMost of the time, this is all you need to know in order to use this technique. But, I did come across an edge case when I was trying to use this in a recent project.\n\nLet's assume this markup\n\n```html\n<div class=\"flex\">\n  <div class=\"wrapper\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi.</p>\n  </div>\n  <div class=\"wrapper\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi.</p>\n  </div>\n</div>\n```\nand this css\n```css\n.flex {\n  display: flex;\n  width: 300px;\n}\n  \n.wrapper {\n  flex-basis: 50%;\n}\n  \np {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\nThis seems like it should work. But, what actually happens is that the width of the paragraph tags, becomes the width of the text itself and completely ignores the explicit width that we've set on both of that elements containers. \n\nThe fix is pretty simple, just add `overflow: hidden;` to the offending element's parent. In this case that would be the div with a class of wrapper.\n\nAnd there you have it, a simple way to make text truncation a whole lot more dynamic! \n\n"
}